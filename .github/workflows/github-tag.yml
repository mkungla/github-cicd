name: Tag

on:
  push:
    tags:
      - 'v*'

jobs:

  checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: npm
          cache-dependency-path: .github/actions-scripts/package-lock.json
      - name: Install action dependencies
        working-directory: ./.github/actions-scripts
        run: npm ci
      - name: wait other workflows to complete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .github/actions-scripts/tagwait.js

  generators:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - name: set the version
        id: set-version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # do fetch-dept handle tags?

      - name: Get repo
        run: |
          git fetch --all
          git checkout main
          git fetch --all
          git pull origin main

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: npm
          cache-dependency-path: .github/actions-scripts/package-lock.json

      # JS
      - name: bump javascript-action version
        working-directory: ./.github/actions/javascript-action
        run: npm version ${{ steps.set-version.outputs.VERSION }}

      # GO
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: (cmd) GO Generate
        working-directory: ./cmd/github-cicd-experiments
        run: go generate ./...

      # Commit generated files
      - name: commit files
        working-directory: ./.github/actions-scripts
        id: commit-changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: generate files for ${{ steps.set-version.outputs.VERSION }}
        run: |
          npm ci
          ./commit.js

      - name: create prerelease
        uses: actions/github-script@v4
        env:
          PRE_VERSION: ${{ steps.set-version.outputs.VERSION }}
          NEW_COMMIT_HASH: ${{ steps.commit-changes.outputs.NEW_COMMIT_HASH }}
        with:
          script: |
            const {
              PRE_VERSION: version,
              NEW_COMMIT_HASH: commitHash,
            } = process.env

            core.info(`creating prerelease: ${commitHash} - ${version}`)
            const {
              data: {
                upload_url: uploadUrl,
              }
            } = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: version,
              prerelease: true,
            })
            core.info(`upload url: ${uploadUrl}`)
            core.info(`uploading: hash artifact ${commitHash}`)

            const hashblob = Buffer.from(commitHash, {
              type: "text/plain; charset=utf-8",
            })
            const args = {
              url: uploadUrl,
              headers: {
                'content-length': hashblob.size,
                'content-type': 'text/plain',
              },
              name: 'build.commithash',
              file: commitHash,
            }

            try {
              await github.repos.uploadReleaseAsset(args)
            } catch (err) {
              core.setFailed(`failed to upload release asset (${err.message}).`)
            }

