# https://github.com/mkungla/github-cicd/discussions/11
name: issues
on:
  issues:
    types:
      - opened
      - edited
      - deleted
      - transferred
      - pinned
      - unpinned
      - closed
      - reopened
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - locked
      - unlocked
      - milestoned
      - demilestoned

  # https://github.com/mkungla/github-cicd/discussions/11#discussioncomment-1233633
  issue_comment:
    types:
      - created
      - deleted
      - edited

# default-steps:
#   - run: echo ${{ toJSON(github) }}
#   - run: echo ${{ toJSON(env) }}
#   - run: echo ${{ toJSON(job) }}
#   - run: echo ${{ toJSON(steps) }}
#   - run: echo ${{ toJSON(runner) }}
#   - run: echo ${{ toJSON(needs) }}


jobs:
  issue-comment:
    name: Issue comment
    if: github.event_name == 'issue_comment' && !github.event.issue.pull_request
    runs-on: ubuntu-latest
    steps:
      - if: github.event.action == 'created'
        run: |
          echo "${{ github.event.sender.login }} commented on issue #${{ github.event.issue.number }}"
      - if: github.event.action == 'deleted'
        run: |
          echo "${{ github.event.sender.login }} deleted comment on issue #${{ github.event.issue.number }}"
      - if: github.event.action == 'edited'
        run: |
          echo "${{ github.event.sender.login }} edited comment on issue #${{ github.event.issue.number }}"

  issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    outputs:
      first-issue: steps.is-first-issue.outputs.value
    steps:
      - if: github.event.issue.pull_request
        run: |
          echo "issue #${{ github.event.issue.number }} pull_request #${{ github.event.issue.pull_request }}"
          exit 1
      - id: is-first-issue
        if: github.event_name == 'issues'
        uses: actions/github-script@v4
        with:
          script: |
            console.log(context)
            # const user = context.issue.user.login
            # const { status, data: issues } = github.issues.listForRepo({
            #   ...context.repo,
            #   creator: user,
            #   state: 'all'
            # })
            # if (status !== 200) {
            #   core.setFailed(`Received unexpected API status code ${status}`)
            #   return
            # }
            # if (issues.length === 0) {
            #   // core.setOutput('value', true)
            # }
            # core.setOutput('value', true)

  # comment on issue
  comment:
    needs: issue
    runs-on: ubuntu-latest
    steps:
      # greeting on first issue
      - if: needs.issue.outputs.first-issue && github.event.action == 'opened'
        run: |
          gh issue comment ${{ github.event.issue.html_url }} \
            --body "ðŸ‘‹ Thanks for reporting @${{ github.event.issue.user.login }}! Your issue will be reviewed shortly."

# - run: |
#     echo "${{ github.event.sender.login }} triggered ${{ github.event.action }} issue #${{ github.event.issue.number }}"
# - name: Dump GitHub context
#   env:
#     GITHUB_CONTEXT: ${{ toJSON(github) }}
#   run: echo "$GITHUB_CONTEXT"
# - name: Dump job context
#   env:
#     JOB_CONTEXT: ${{ toJSON(job) }}
#   run: echo "$JOB_CONTEXT"
# - name: Dump steps context
#   env:
#     STEPS_CONTEXT: ${{ toJSON(steps) }}
#   run: echo "$STEPS_CONTEXT"
# - name: Dump runner context
#   env:
#     RUNNER_CONTEXT: ${{ toJSON(runner) }}
#   run: echo "$RUNNER_CONTEXT"
# - name: Dump strategy context
#   env:
#     STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
#   run: echo "$STRATEGY_CONTEXT"
# - name: Dump matrix context
#   env:
#     MATRIX_CONTEXT: ${{ toJSON(matrix) }}
#   run: echo "$MATRIX_CONTEXT"
# - name: Dump env context
#   env:
#     ENV_CONTEXT: ${{ toJSON(env) }}
#   run: echo "$ENV_CONTEXT"
# - name: Dump needs context
#   env:
#     NEEDS_CONTEXT: ${{ toJSON(needs) }}
#   run: echo "$NEEDS_CONTEXT"
