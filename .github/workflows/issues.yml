# https://github.com/mkungla/github-cicd/discussions/11
name: issues
on:
  issues:
    types:
      - opened
      - edited
      - deleted
      - transferred
      - pinned
      - unpinned
      - closed
      - reopened
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - locked
      - unlocked
      - milestoned
      - demilestoned

  # https://github.com/mkungla/github-cicd/discussions/11#discussioncomment-1233633
  issue_comment:
    types:
      - created
      - deleted
      - edited

  schedule:
    - name: "daily"
      cron: '*/5 * * * *' # 0 0 * * *

jobs:
  # Comment
  issue-comment:
    name: Issue comment
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && !github.event.issue.pull_request
    steps:
      - if: github.event.action == 'created'
        run: |
          echo "${{ github.event.sender.login }} commented on issue #${{ github.event.issue.number }}"
      - if: github.event.action == 'deleted'
        run: |
          echo "${{ github.event.sender.login }} deleted comment on issue #${{ github.event.issue.number }}"
      - if: github.event.action == 'edited'
        run: |
          echo "${{ github.event.sender.login }} edited comment on issue #${{ github.event.issue.number }}"

  # Issues
  issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    outputs:
      user-issues-total: ${{ steps.set-user-issues-total.outputs.value }}
    steps:
      - if: github.event.issue.pull_request
        name: is pull request
        run: |
          echo "issue #${{ github.event.issue.number }} pull_request #${{ github.event.issue.pull_request }}"
          exit 1
      - name: issue payload
        env:
          issue: ${{ toJSON(github.event.issue) }}
        run: echo "$issue"
      - name: set-user-issues-total
        id: set-user-issues-total
        if: github.event_name == 'issues'
        uses: actions/github-script@v4
        with:
          script: |
            const user = context.payload.sender.login
            const query = `query($user: String) {
              repository(owner: "mkungla", name: "github-cicd") {
                issues(filterBy: {createdBy: $user}) {
                  totalCount
                }
              }
            }`
            const res = await github.graphql(query, {
              "user": user
            })
            core.info(`user: ${user} has total ${res.repository.issues.totalCount} issues`)
            core.setOutput('value', res.repository.issues.totalCount)

  # Schedule
  schedule:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

  daily:
    needs: schedule
    if: github.event.schedule == '*/5 * * * *'
    runs-on: ubuntu-latest
    steps:
      - if: ${{ contains(toJSON(github.event), 'daily') }}
        run: exit 1

  # comment on issue
  comment:
    needs:
      - issue
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: greeting on first issue
        if: needs.issue.outputs.user-issues-total == 0 && github.event.action == 'opened'
        run: |
          gh issue comment ${{ github.event.issue.html_url }} \
            --body "ðŸ‘‹ Thanks for reporting @${{ github.event.sender.login }}! This your first issue and will be reviewed shortly."
      - name: greeting for reccuring user
        if: needs.issue.outputs.user-issues-total > 0 && github.event.action == 'opened'
        run: |
          gh issue comment ${{ github.event.issue.html_url }} \
            --body ":boom: Thanks for reporting @${{ github.event.sender.login }}! You have opened total **${{ needs.issue.outputs.user-issues-total }}** issues in this repository."

  # add remove labels
  labels:
    needs:
      - issue
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: on open add labels
        if: github.event.action == 'opened' && !contains(github.event.issue.labels.*.name, 'triage')
        run: gh issue edit ${{ github.event.issue.html_url }} --add-label "triage"
      - name: on close remove labels
        if: github.event.action == 'closed' && contains(github.event.issue.labels.*.name, 'triage')
        run: gh issue edit ${{ github.event.issue.html_url }} --remove-label "triage"

  reaction:
    needs:
      - issue
    runs-on: ubuntu-latest
    steps:
      - if: github.event.action == 'opened'
        uses: actions/github-script@v4
        with:
          script: |
            github.reactions.createForIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              content: 'heart',
            })

  stale:
    needs:
      - daily
      - issue-comment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/stale@v4
        with:
          days-before-issue-stale: 1
          days-before-issue-close: 1
          stale-issue-message: 'This issue has no activity for a while.'
          close-issue-message: 'This issue was closed since there was no activity after it was marked stale.'
          stale-issue-label: 'stale'
          exempt-issue-labels: 'bug'
          remove-issue-stale-when-updated: true
          labels-to-add-when-unstale: 'triage'
          exempt-all-issue-milestones: true
          days-before-pr-stale : -1
          days-before-pr-close: -1




# - run: |
#     echo "${{ github.event.sender.login }} triggered ${{ github.event.action }} issue #${{ github.event.issue.number }}"
# - name: Dump GitHub context
#   env:
#     GITHUB_CONTEXT: ${{ toJSON(github) }}
#   run: echo "$GITHUB_CONTEXT"
# - name: Dump job context
#   env:
#     JOB_CONTEXT: ${{ toJSON(job) }}
#   run: echo "$JOB_CONTEXT"
# - name: Dump steps context
#   env:
#     STEPS_CONTEXT: ${{ toJSON(steps) }}
#   run: echo "$STEPS_CONTEXT"
# - name: Dump runner context
#   env:
#     RUNNER_CONTEXT: ${{ toJSON(runner) }}
#   run: echo "$RUNNER_CONTEXT"
# - name: Dump strategy context
#   env:
#     STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
#   run: echo "$STRATEGY_CONTEXT"
# - name: Dump matrix context
#   env:
#     MATRIX_CONTEXT: ${{ toJSON(matrix) }}
#   run: echo "$MATRIX_CONTEXT"
# - name: Dump env context
#   env:
#     ENV_CONTEXT: ${{ toJSON(env) }}
#   run: echo "$ENV_CONTEXT"
# - name: Dump needs context
#   env:
#     NEEDS_CONTEXT: ${{ toJSON(needs) }}
#   run: echo "$NEEDS_CONTEXT"
